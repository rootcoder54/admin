// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  name     String?
  username String  @unique
  password String?
  image    String?

  boards Board[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFormation {
  id         String  @id @default(cuid())
  nom        String?
  email      String  @unique
  profession String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id          String  @id @default(uuid())
  question    String
  observation String?
  image       String?

  reponse     String?
  reponseFile String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoAstuce {
  id          String  @id @default(uuid())
  nom         String
  description String?
  detail      String?
  video       String
  image       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Board {
  id    String @id @default(uuid())
  title String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  image String
  lists List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id    String @id @default(uuid())
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String  @id @default(uuid())
  title       String
  order       Int
  description String?

  listId   String
  list     List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  echeance DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

model Client {
  id        String  @id @default(uuid())
  nomClient String
  sigle     String?
  adresse   String?
  telephone String?
  activite  String?

  numero          String?
  dateInscription DateTime?

  dateLastVisite DateTime?
  dateNewVisite  DateTime?

  contacts      Contact[]
  contrats      Contrat[]
  interventions Intervention[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String  @id @default(uuid())
  nom       String
  telephone String?
  email     String?
  poste     String?

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Contrat {
  id           String   @id @default(uuid())
  dateDebut    DateTime
  dateFin      DateTime
  fichier      String?
  type         String?
  reconduction String?

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Intervention {
  id           String    @id @default(uuid())
  numero       String
  service      String
  intervenant  String
  nature       String?
  observations String?
  fichier      String?
  dateCloture  DateTime?

  items ItemIntervention[]

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemIntervention {
  id          String   @id @default(uuid())
  date        DateTime
  debut       String
  fin         String
  description String?

  Intervention   Intervention? @relation(fields: [interventionId], references: [id], onDelete: Cascade)
  interventionId String?
}
